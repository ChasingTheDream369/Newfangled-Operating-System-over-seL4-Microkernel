/*
 * Copyright 2020, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: GPL-2.0-only
 */

/*
 * This file is autogenerated by kernel/tools/hardware_gen.py
 */

#pragma once

#include <types.h>
#include <psci.h>

#define MAX_NUM_REGIONS 1

struct elfloader_driver;

struct elfloader_device {
    const char *compat;
    volatile void *region_bases[MAX_NUM_REGIONS];
    struct elfloader_driver *drv;
};

struct elfloader_cpu {
    const char *compat;
    const char *enable_method;
    word_t cpu_id;
    word_t extra_data;
};

#ifdef DRIVER_COMMON
struct elfloader_device elfloader_devices[] = {
    {
        /* /soc/bus@c8100000/serial@4c0 */
        .compat = "amlogic,meson-gx-uart",
        .region_bases = {
            (void *)0xc81004c0,
        },
    },
    {
        /* /psci */
        .compat = "arm,psci-0.2",
        .region_bases = {
            (void *)0,
        },
    },
};

struct elfloader_cpu elfloader_cpus[] = {
    {
        /* /cpus/cpu@0 */
        .compat = "arm,cortex-a53",
        .enable_method = "psci",
        .cpu_id = 0x0,
        .extra_data = PSCI_METHOD_SMC
    },
    {
        /* /cpus/cpu@1 */
        .compat = "arm,cortex-a53",
        .enable_method = "psci",
        .cpu_id = 0x1,
        .extra_data = PSCI_METHOD_SMC
    },
    {
        /* /cpus/cpu@2 */
        .compat = "arm,cortex-a53",
        .enable_method = "psci",
        .cpu_id = 0x2,
        .extra_data = PSCI_METHOD_SMC
    },
    {
        /* /cpus/cpu@3 */
        .compat = "arm,cortex-a53",
        .enable_method = "psci",
        .cpu_id = 0x3,
        .extra_data = PSCI_METHOD_SMC
    },
    { .compat = NULL /* sentinel */ },
};
#else
extern struct elfloader_device elfloader_devices[];
extern struct elfloader_cpu elfloader_cpus[];
#endif